@model EcoLift.Models.SearchRideViewModel
@{
    ViewData["Title"] = "Search Rides";
    ViewData["HideFooter"] = true;
}

<div class="search-page">
    <!-- Search Form Section -->
    <div class="search-form-section">
        <div class="container">
            <div class="search-form-container">
                @* <h1 class="search-title">Find Your Perfect Ride</h1>
                <p class="search-subtitle">Connect with drivers going your way</p> *@
                
                <form method="get" action="@Url.Action("Search", "Home")" class="search-form">
                    <div class="search-form-grid">
                        <!-- From Location -->
                        <div class="search-field">
                            <label class="search-label">Leaving from</label>
                            <div class="search-input-wrapper">
                                <i class="fas fa-map-marker-alt search-icon"></i>
                                <input type="text" name="FromLocation" placeholder="City or address" class="search-input" id="fromLocation" value="@Model.FromLocation">
                                <input type="hidden" name="FromLatitude" id="fromLatitude" value="@Model.FromLatitude">
                                <input type="hidden" name="FromLongitude" id="fromLongitude" value="@Model.FromLongitude">
                            </div>
                        </div>
                        
                        <!-- To Location -->
                        <div class="search-field">
                            <label class="search-label">Going to</label>
                            <div class="search-input-wrapper">
                                <i class="fas fa-map-marker-alt search-icon"></i>
                                <input type="text" name="ToLocation" placeholder="City or address" class="search-input" id="toLocation" value="@Model.ToLocation">
                                <input type="hidden" name="ToLatitude" id="toLatitude" value="@Model.ToLatitude">
                                <input type="hidden" name="ToLongitude" id="toLongitude" value="@Model.ToLongitude">
                            </div>
                        </div>
                        
                        <!-- Date -->
                        <div class="search-field">
                            <label class="search-label">When</label>
                            <div class="search-input-wrapper">
                                <i class="far fa-calendar search-icon"></i>
                                <input type="date" name="DepartureDate" class="search-input" value="@(Model.DepartureDate?.ToString("yyyy-MM-dd"))">
                            </div>
                        </div>
                        
                        <!-- Passengers -->
                        <div class="search-field">
                            <label class="search-label">Passengers</label>
                            <div class="search-input-wrapper">
                                <i class="fas fa-users search-icon"></i>
                                <select name="Passengers" class="search-input search-select">
                                    <option value="1" selected="@(Model.Passengers == 1 || Model.Passengers == 0)">1 passenger</option>
                                    <option value="2" selected="@(Model.Passengers == 2)">2 passengers</option>
                                    <option value="3" selected="@(Model.Passengers == 3)">3 passengers</option>
                                    <option value="4" selected="@(Model.Passengers == 4)">4 passengers</option>
                                </select>
                                <i class="fas fa-chevron-down search-icon-right"></i>
                            </div>
                        </div>
                    </div>
                    
                                                              <div class="search-buttons">
                         <button type="submit" class="search-button-new">
                             <i class="fas fa-search search-button-icon"></i>
                             Find a ride
                         </button>
                         @* <a href="@Url.Action("Search", "Home")" class="clear-search-button">
                             <i class="fas fa-times"></i>
                             Clear Search
                         </a> *@
                     </div>
                 </form>
                 
                                  <!-- Compact Search History Display -->
                 @* @if (ViewBag.SearchHistory != null && ViewBag.SearchHistory.Count > 0)
                 {
                    
                     
                     <div class="history-items">
                             @{
                                 var historyList = ViewBag.SearchHistory as List<EcoLift.Models.SearchHistory>;
                                 if (historyList != null)
                                 {
                                     foreach (var history in historyList.Take(3)) // Show only 3 most recent
                                     {
                                         if (history != null)
                                         {
                                             <div class="history-item" onclick="loadSearchFromHistory(@Json.Serialize(history))">
                                                 <div class="history-route-compact">
                                                     <span class="from-location">@(string.IsNullOrEmpty(history.FromLocation) ? "Anywhere" : history.FromLocation)</span>
                                                     <i class="fas fa-arrow-right"></i>
                                                     <span class="to-location">@(string.IsNullOrEmpty(history.ToLocation) ? "Anywhere" : history.ToLocation)</span>
                                                 </div>
                                                 <div class="history-meta">
                                                     @if (history.Passengers.HasValue)
                                                     {
                                                         <span class="passenger-count">
                                                             <i class="fas fa-users"></i>
                                                             @history.Passengers
                                                         </span>
                                                     }
                                                     <span class="search-time">
                                                         <i class="fas fa-clock"></i>
                                                         @history.SearchedAt.ToString("MMM dd")
                                                     </span>
                                                 </div>
                                             </div>
                                         }
                                     }
                                 }
                             }
                      
                     </div>
                 } *@
                 
                 @* <!-- Debug: Test button -->
                 <div class="mt-2 text-center">
                     <button type="button" class="btn btn-sm btn-outline-secondary" onclick="testHistoryFunction()">
                         Test History Function
                     </button>
                 </div> *@
                 
                 <!-- Search Radius Info -->
                 <div class="search-radius-info">
                     <i class="fas fa-info-circle"></i>
                     <span>Search radius: @Model.SearchRadius km around your selected locations</span>
                 </div>
            </div>
        </div>
    </div>

    <!-- Search Results Section -->
    @if (ViewBag.SearchResults != null && ViewBag.SearchResults.Count > 0)
    {
        <div class="search-results-section">
            <div class="container">
                <div class="results-header">
                    <p class="results-count">@ViewBag.ResultCount rides found</p>
                </div>

                <div class="results-grid">
                    @foreach (var ride in ViewBag.SearchResults)
                    {
                        <div class="ride-card">
                            <div class="ride-header">
                                <div class="ride-route">
                                    <div class="route-point pickup">
                                        <i class="fas fa-circle"></i>
                                        <span>@ride.PickupLocation</span>
                                    </div>
                                    <div class="route-line">
                                        <i class="fas fa-arrow-right"></i>
                                    </div>
                                    <div class="route-point dropoff">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <span>@ride.DropoffLocation</span>
                                    </div>
                                </div>
                                <div class="ride-status">
                                    @switch (ride.Status)
                                    {
                                        case EcoLift.Models.Enums.TripStatus.Published:
                                            <span class="status-badge published">Available</span>
                                            break;
                                        case EcoLift.Models.Enums.TripStatus.PartiallyBooked:
                                            <span class="status-badge partially-booked">@ride.RemainingSeats seats left</span>
                                            break;
                                        default:
                                            <span class="status-badge published">Available</span>
                                            break;
                                    }
                                </div>
                            </div>

                            <div class="ride-details">
                                <div class="detail-row">
                                    <div class="detail-item">
                                        <i class="fas fa-calendar"></i>
                                        <span>@ride.DepartureDate.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    <div class="detail-item">
                                        <i class="fas fa-clock"></i>
                                        <span>@(ride.DepartureTime.Hours.ToString("00")):@(ride.DepartureTime.Minutes.ToString("00"))</span>
                                    </div>
                                </div>
                                <div class="detail-row">
                                    <div class="detail-item">
                                        <i class="fas fa-user"></i>
                                        <span>@ride.Provider.FirstName @ride.Provider.LastName</span>
                                    </div>
                                    <div class="detail-item price">
                                        <span>€@ride.PricePerSeat per seat</span>
                                    </div>
                                </div>
                                <div class="detail-row">
                                    <div class="detail-item">
                                        <i class="fas fa-users"></i>
                                        <span>@ride.RemainingSeats of @ride.AvailableSeats seats available</span>
                                    </div>
                                    @if (ride.Vehicle != null)
                                    {
                                        <div class="detail-item">
                                            <i class="fas fa-car"></i>
                                            <span>@ride.Vehicle.Brand @ride.Vehicle.Model</span>
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="ride-actions">
                                <a href="@Url.Action("Create", "Booking", new { tripId = ride.TripId })" class="btn-action btn-book">
                                    <i class="fas fa-ticket-alt"></i>
                                    Book Seat
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    
</div>

<script>
// Initialize Google Places Autocomplete for location inputs
function initAutocomplete() {
    const fromInput = document.getElementById('fromLocation');
    const toInput = document.getElementById('toLocation');
    const fromLatInput = document.getElementById('fromLatitude');
    const fromLngInput = document.getElementById('fromLongitude');
    const toLatInput = document.getElementById('toLatitude');
    const toLngInput = document.getElementById('toLongitude');

    if (fromInput) {
        const fromAutocomplete = new google.maps.places.Autocomplete(fromInput, {
            fields: ['formatted_address', 'geometry', 'name']
        });
        
        fromAutocomplete.addListener('place_changed', function() {
            const place = fromAutocomplete.getPlace();
            if (place.geometry && place.geometry.location) {
                fromLatInput.value = place.geometry.location.lat();
                fromLngInput.value = place.geometry.location.lng();
                console.log('From coordinates:', place.geometry.location.lat(), place.geometry.location.lng());
            }
        });
    }

    if (toInput) {
        const toAutocomplete = new google.maps.places.Autocomplete(toInput, {
            fields: ['formatted_address', 'geometry', 'name']
        });
        
        toAutocomplete.addListener('place_changed', function() {
            const place = toAutocomplete.getPlace();
            if (place.geometry && place.geometry.location) {
                toLatInput.value = place.geometry.location.lat();
                toLngInput.value = place.geometry.location.lng();
                console.log('To coordinates:', place.geometry.location.lat(), place.geometry.location.lng());
            }
        });
    }
}

// Initialize autocomplete when page loads
window.addEventListener('load', initAutocomplete);

// Function to load search parameters from history
function loadSearchFromHistory(history) {
    console.log('Loading search from history:', history);
    
    try {
        // Fill the form fields with history data
        const fromLocationInput = document.getElementById('fromLocation');
        const fromLatInput = document.getElementById('fromLatitude');
        const fromLngInput = document.getElementById('fromLongitude');
        const toLocationInput = document.getElementById('toLocation');
        const toLatInput = document.getElementById('toLatitude');
        const toLngInput = document.getElementById('toLongitude');
        const dateInput = document.querySelector('input[name="DepartureDate"]');
        const passengersSelect = document.querySelector('select[name="Passengers"]');
        
        if (fromLocationInput) fromLocationInput.value = history.fromLocation || '';
        if (fromLatInput) fromLatInput.value = history.fromLatitude || '';
        if (fromLngInput) fromLngInput.value = history.fromLongitude || '';
        if (toLocationInput) toLocationInput.value = history.toLocation || '';
        if (toLatInput) toLatInput.value = history.toLatitude || '';
        if (toLngInput) toLngInput.value = history.toLongitude || '';
        
        if (history.departureDate && dateInput) {
            // Handle both DateTime and string formats
            let dateValue = history.departureDate;
            if (typeof dateValue === 'string') {
                if (dateValue.includes('T')) {
                    dateValue = dateValue.split('T')[0];
                }
            } else if (dateValue instanceof Date) {
                dateValue = dateValue.toISOString().split('T')[0];
            }
            dateInput.value = dateValue;
        }
        
        if (history.passengers && passengersSelect) {
            passengersSelect.value = history.passengers;
        }
        
        console.log('Form filled, submitting...');
        
        // Submit the form automatically
        const form = document.querySelector('.search-form');
        if (form) {
            form.submit();
        } else {
            console.error('Search form not found');
        }
    } catch (error) {
        console.error('Error loading search from history:', error);
    }
}

// Test function to verify the history loading works
function testHistoryFunction() {
    console.log('Testing history function...');
    
    // Create a test history object
    const testHistory = {
        fromLocation: 'Munich',
        fromLatitude: 48.1351,
        fromLongitude: 11.5820,
        toLocation: 'Berlin',
        toLatitude: 52.5200,
        toLongitude: 13.4050,
        departureDate: '2024-01-15',
        passengers: 2
    };
    
    console.log('Test history object:', testHistory);
    
    // Try to load it
    loadSearchFromHistory(testHistory);
}
</script>

<!-- Google Maps JavaScript API for Places Autocomplete -->
<script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDtcU9ln2mFTbWZHXpwJZCe7x9qc4MnH64&libraries=places&callback=initAutocomplete">
</script>

<style>
.search-page {
    background-color: #f8f9fa;
    min-height: 100vh;
}

.search-form-section {
    background: white;
    padding: 2rem 0;
    border-bottom: 1px solid #e9ecef;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.search-form-container {
    max-width: 1000px;
    margin: 0 auto;
    text-align: center;
}

.search-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--secondary-color);
    margin-bottom: 0.5rem;
}

.search-subtitle {
    font-size: 1.1rem;
    color: var(--gray);
    margin-bottom: 2rem;
}

/* Search Widget Styles - Matching Home Page */
.search-form {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}

.search-form-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1.5rem;
    margin-bottom: 1.5rem;
}

.search-field {
    text-align: left;
}

.search-label {
    display: block;
    font-weight: 500;
    color: var(--secondary-color);
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
}

.search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
}

.search-icon {
    position: absolute;
    left: 12px;
    color: #9ca3af;
    font-size: 1rem;
    z-index: 1;
}

.search-icon-right {
    position: absolute;
    right: 12px;
    color: #9ca3af;
    font-size: 0.875rem;
    z-index: 1;
    pointer-events: none;
}

.search-input {
    width: 100%;
    padding: 0.75rem 0.75rem 0.75rem 2.5rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    font-size: 1rem;
    transition: border-color 0.2s ease;
    background: white;
}

.search-input:focus {
    outline: none;
    border-color: var(--primary-color);
}

.search-select {
    padding-right: 2.5rem;
}

.search-button-new {
    background: var(--primary-color);
    color: white;
    padding: 0.75rem 2rem;
    border: none;
    border-radius: 0.375rem;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0 auto;
}

.search-button-new:hover {
    background: var(--primary-hover);
}

.search-button-icon {
    font-size: 1rem;
}

.search-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    align-items: center;
}

.clear-search-button {
    background: var(--light-gray);
    color: var(--gray);
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.375rem;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
}

.clear-search-button:hover {
    background: #d1d5db;
    color: var(--secondary-color);
    text-decoration: none;
}

.search-radius-info {
    margin-top: 1rem;
    padding: 0.75rem;
    background: var(--light-gray);
    border-radius: 0.375rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--gray);
    max-width: fit-content;
    margin-left: auto;
    margin-right: auto;
}

.search-radius-info i {
    color: var(--primary-color);
}

/* Search Results */
.search-results-section {
    padding: 2rem 0;
}

/* Compact Search History Display */
.search-history-display {
    margin-top: 1.5rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e9ecef;
}

.history-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #6b7280;
    font-size: 0.875rem;
    font-weight: 500;
    margin-bottom: 0.75rem;
}

.history-label i {
    color: #9ca3af;
}

.history-items {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.history-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: white;
    border-radius: 6px;
    border: 1px solid #e9ecef;
    cursor: pointer;
    transition: all 0.2s ease;
}

.history-item:hover {
    border-color: var(--primary-color);
    background: #f8f9ff;
    transform: translateX(2px);
}

.history-route-compact {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
}

.from-location {
    color: var(--secondary-color);
    font-weight: 500;
}

.to-location {
    color: var(--secondary-color);
    font-weight: 500;
}

.history-route-compact i {
    color: #9ca3af;
    font-size: 0.75rem;
}

.history-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 0.75rem;
    color: #6b7280;
}

.passenger-count, .search-time {
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

.passenger-count i, .search-time i {
    color: #9ca3af;
    width: 12px;
    text-align: center;
}

.results-header {
    text-align: center;
    margin-bottom: 2rem;
}

.results-header h2 {
    font-size: 2rem;
    font-weight: 600;
    color: var(--secondary-color);
    margin-bottom: 0.5rem;
}

.results-count {
    color: var(--gray);
    font-size: 1.1rem;
}

.results-grid {
    display: grid;
    gap: 1.5rem;
    max-width: 800px;
    margin: 0 auto;
}

.ride-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    transition: box-shadow 0.2s ease;
}

.ride-card:hover {
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.ride-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1.25rem;
}

.ride-route {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex: 1;
}

.route-point {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    color: var(--secondary-color);
}

.route-point.pickup i {
    color: var(--success-color);
    font-size: 0.75rem;
}

.route-point.dropoff i {
    color: var(--primary-color);
    font-size: 1rem;
}

.route-line {
    color: #9ca3af;
    flex: 1;
    text-align: center;
}

.ride-status {
    margin-left: 1rem;
}

.status-badge {
    padding: 0.375rem 0.875rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.status-badge.published {
    background-color: #d1fae5;
    color: #065f46;
}

.status-badge.partially-booked {
    background-color: #fef3c7;
    color: #92400e;
}

.ride-details {
    margin-bottom: 1.25rem;
}

.detail-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.75rem;
}

.detail-row:last-child {
    margin-bottom: 0;
}

.detail-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #6b7280;
    font-size: 0.875rem;
}

.detail-item i {
    color: #9ca3af;
    width: 16px;
    text-align: center;
}

.detail-item.price {
    font-weight: 600;
    color: var(--primary-color);
}

.ride-actions {
    display: flex;
    gap: 0.75rem;
    padding-top: 1rem;
    border-top: 1px solid #f3f4f6;
}

.btn-action {
    padding: 0.5rem 1.25rem;
    border-radius: 8px;
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s ease;
    border: 1px solid transparent;
}

.btn-book {
    background-color: var(--primary-color);
    color: white;
}

.btn-book:hover {
    background-color: var(--primary-hover);
    color: white;
    text-decoration: none;
}

.btn-contact {
    background-color: white;
    color: var(--primary-color);
    border-color: var(--primary-color);
}

.btn-contact:hover {
    background-color: var(--primary-color);
    color: white;
    text-decoration: none;
}

.no-results {
    text-align: center;
    padding: 3rem 2rem;
}

.no-results-icon {
    font-size: 4rem;
    color: #d1d5db;
    margin-bottom: 1.5rem;
}

.no-results h3 {
    color: var(--secondary-color);
    margin-bottom: 0.75rem;
    font-weight: 600;
}

.no-results p {
    color: #6b7280;
    margin-bottom: 1.5rem;
    font-size: 1rem;
}

.btn-primary {
    background-color: var(--primary-color);
    color: white;
    padding: 0.5rem 1.25rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: background-color 0.2s ease;
}

.btn-primary:hover {
    background-color: var(--primary-hover);
    color: white;
    text-decoration: none;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .search-title {
        font-size: 2rem;
    }
    
    .search-form {
        padding: 1.5rem;
    }
    
    .search-form-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .ride-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }
    
    .ride-route {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
    
    .route-line {
        display: none;
    }
    
    .detail-row {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .ride-actions {
        flex-direction: column;
    }
    
    .btn-action {
        justify-content: center;
    }
    
    .history-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
    
    .history-route-compact {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
    }
    
    .history-meta {
        align-self: stretch;
        justify-content: space-between;
    }
}
</style>
